define(function(require,exports,module){const CodeInspection=brackets.getModule("language/CodeInspection"),AppInit=brackets.getModule("utils/AppInit"),Strings=brackets.getModule("strings"),StringUtils=brackets.getModule("utils/StringUtils"),EditorManager=brackets.getModule("editor/EditorManager"),ProjectManager=brackets.getModule("project/ProjectManager"),PreferencesManager=brackets.getModule("preferences/PreferencesManager"),Metrics=brackets.getModule("utils/Metrics"),FileSystem=brackets.getModule("filesystem/FileSystem"),IndexingWorker=brackets.getModule("worker/IndexingWorker");Phoenix.isTestWindow&&IndexingWorker.on("html_lint_extension_Loaded",()=>{window._htmlLintExtensionReadyToIntegTest=!0}),IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/html-worker.js`);const prefs=PreferencesManager.getExtensionPrefs("HTMLLint"),PREFS_HTML_LINT_DISABLED="disabled",CONFIG_FILE_NAME=".htmlvalidate.json",UNSUPPORTED_CONFIG_FILES=[".htmlvalidate.js",".htmlvalidate.cjs"];let projectSpecificOptions,configErrorMessage,configID=0,projectConfigPaths;function getTypeFromSeverity(sev){switch(sev){case 1:return CodeInspection.Type.WARNING;case 2:return CodeInspection.Type.ERROR;default:return CodeInspection.Type.META}}function _getLinterConfigFileErrorMsg(){return[{pos:{line:-1,ch:0},message:configErrorMessage,type:CodeInspection.Type.ERROR}]}async function lintOneFile(text,fullPath){return new Promise((resolve,reject)=>{configErrorMessage?resolve({errors:_getLinterConfigFileErrorMsg()}):IndexingWorker.execPeer("htmlLint",{text:text,filePath:fullPath,configID:configID,config:projectSpecificOptions}).then(lintResult=>{const editor=EditorManager.getCurrentFullEditor();editor&&editor.document.file.fullPath===fullPath?(lintResult&&lintResult.length&&(lintResult=lintResult.map(function(lintError){return{pos:editor.posFromIndex(lintError.start),endPos:editor.posFromIndex(lintError.end),message:`${lintError.message} (${lintError.ruleId})`,type:getTypeFromSeverity(lintError.severity),moreInfoURL:lintError.ruleUrl}}),resolve({errors:lintResult})),resolve()):reject(new Error("Lint failed as  "+ProjectManager.getProjectRelativeOrDisplayPath(fullPath)+" is not active."))}).catch(err=>{console.error("HTML Lint failed:",err),reject(new Error("HTML Lint failed as HTML plugin is not yet loaded. Please try again."))})})}function _readConfig(dir){return new Promise((resolve,reject)=>{const configFilePath=path.join(dir,CONFIG_FILE_NAME);let displayPath=ProjectManager.getProjectRelativeOrDisplayPath(configFilePath);fs.readFile(configFilePath,"utf8",function(err,content){if(err&&fs.ERR_CODES.ENOENT===err.code)resolve(null);else if(err)console.error("Error reading JSHint Config File",configFilePath,err),reject("Error reading JSHint Config File",displayPath);else{let config;try{config=JSON.parse(content),console.log("html-lint: loaded config file for project "+configFilePath)}catch(e){return console.log("html-lint: error parsing "+configFilePath,content,e),void reject(StringUtils.format(Strings.HTML_LINT_CONFIG_JSON_ERROR,displayPath))}resolve(config)}})})}async function _validateUnsupportedConfig(scanningProjectPath){let errorMessage;for(let unsupportedFileName of UNSUPPORTED_CONFIG_FILES){let exists;if(await FileSystem.existsAsync(path.join(scanningProjectPath,unsupportedFileName))){errorMessage=StringUtils.format(Strings.HTML_LINT_CONFIG_UNSUPPORTED,unsupportedFileName);break}}scanningProjectPath===ProjectManager.getProjectRoot().fullPath&&(configErrorMessage=errorMessage,CodeInspection.requestRun(Strings.HTML_LINT_NAME))}function _reloadOptions(){projectSpecificOptions=null,configErrorMessage=null;const scanningProjectPath=ProjectManager.getProjectRoot().fullPath;configID++,_readConfig(scanningProjectPath).then(config=>{configID++,scanningProjectPath===ProjectManager.getProjectRoot().fullPath&&(config?(Metrics.countEvent(Metrics.EVENT_TYPE.LINT,"html","configPresent"),projectSpecificOptions=config,configErrorMessage=null,CodeInspection.requestRun(Strings.HTML_LINT_NAME)):_validateUnsupportedConfig(scanningProjectPath).catch(console.error))}).catch(err=>{configID++,scanningProjectPath===ProjectManager.getProjectRoot().fullPath&&(Metrics.countEvent(Metrics.EVENT_TYPE.LINT,"HTMLConfig","error"),configErrorMessage=err,CodeInspection.requestRun(Strings.HTML_LINT_NAME))})}function _getConfigPaths(){return projectConfigPaths||(projectConfigPaths=[path.join(ProjectManager.getProjectRoot().fullPath,CONFIG_FILE_NAME),...UNSUPPORTED_CONFIG_FILES.map(fileName=>path.join(ProjectManager.getProjectRoot().fullPath,fileName))]),projectConfigPaths}function _projectFileChanged(_evt,changedPath,addedSet,removedSet){const configPaths=_getConfigPaths();for(let configPath of configPaths)if(changedPath===configPath||addedSet.has(configPath)||removedSet.has(configPath))return void _reloadOptions()}prefs.definePreference("disabled","boolean",!1,{description:Strings.DESCRIPTION_HTML_LINT_DISABLE}).on("change",function(){CodeInspection.requestRun(Strings.HTML_LINT_NAME)}),AppInit.appReady(function(){ProjectManager.on(ProjectManager.EVENT_PROJECT_CHANGED_OR_RENAMED_PATH,_projectFileChanged),ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN,()=>{projectConfigPaths=null,_reloadOptions()}),_reloadOptions()});const registration={name:Strings.HTML_LINT_NAME,scanFileAsync:lintOneFile,canInspect:function(_fullPath){return!prefs.get("disabled")}};CodeInspection.register("html",registration),CodeInspection.register("php",registration)});
//# sourceMappingURL=html-lint.js.map
