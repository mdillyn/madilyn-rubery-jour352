define(function(require,exports,module){const CodeInspection=brackets.getModule("language/CodeInspection"),FileSystemError=brackets.getModule("filesystem/FileSystemError"),AppInit=brackets.getModule("utils/AppInit"),PreferencesManager=brackets.getModule("preferences/PreferencesManager"),DocumentManager=brackets.getModule("document/DocumentManager"),Strings=brackets.getModule("strings"),StringUtils=brackets.getModule("utils/StringUtils"),ProjectManager=brackets.getModule("project/ProjectManager"),FileSystem=brackets.getModule("filesystem/FileSystem"),IndexingWorker=brackets.getModule("worker/IndexingWorker"),Metrics=brackets.getModule("utils/Metrics"),ESLint=require("./ESLint");Phoenix.isTestWindow&&IndexingWorker.on("JsHint_extension_Loaded",()=>{window._JsHintExtensionReadyToIntegTest=!0}),IndexingWorker.loadScriptInWorker(`${module.uri}/../worker/jslint-helper.js`);let prefs=PreferencesManager.getExtensionPrefs("jshint"),projectSpecificOptions=null,jsHintConfigFileErrorMessage=null;const PREFS_JSHINT_DISABLED="disabled";let DEFAULT_OPTIONS={esversion:11,browser:!0,node:!0,jquery:!0,rhino:!1,jasmine:!0,devel:!1};function _getLinterConfigFileErrorMsg(){return[{pos:{line:-1,ch:0},message:jsHintConfigFileErrorMessage,type:CodeInspection.Type.ERROR}]}async function lintOneFile(text,_fullPath){return new Promise((resolve,reject)=>{if(jsHintConfigFileErrorMessage)return void resolve({errors:_getLinterConfigFileErrorMsg()});text=text.replace(/^[ \t]+$/gm,"");let options=projectSpecificOptions||DEFAULT_OPTIONS;const startTime=Date.now();IndexingWorker.execPeer("jsHint",{text:text,options:options}).then(jsHintErrors=>{if(Metrics.logPerformanceTime("JSHint",Date.now()-startTime),!jsHintErrors.lintResult&&jsHintErrors.errors.length){let errors=jsHintErrors.errors;errors=errors.map(function(lintError){return{pos:{line:lintError.line-1,ch:lintError.character},message:`${lintError.reason} jshint (${lintError.code})`,type:CodeInspection.Type.ERROR}}),resolve({errors:errors})}resolve()}).catch(err=>{console.error("JSHint failed:",err),reject(new Error("JSHint failed as JSHint plugin is not yet loaded. Please try again."))})})}prefs.definePreference("disabled","boolean",!1,{description:Strings.DESCRIPTION_JSHINT_DISABLE}).on("change",function(){CodeInspection.requestRun(Strings.JSHINT_NAME)});const CONFIG_FILE_NAME=".jshintrc";function removeComments(str){return str=(str=(str=str||"").replace(/\/\*(?:(?!\*\/)[\s\S])*\*\//g,"")).replace(/\/\/[^\n\r]*/g,"")}function _readConfig(dir,configFileName){return new Promise((resolve,reject)=>{configFileName=configFileName||CONFIG_FILE_NAME;const configFilePath=path.join(dir,configFileName);let displayPath=ProjectManager.getProjectRelativeOrDisplayPath(configFilePath);DocumentManager.getDocumentForPath(configFilePath).done(function(configDoc){if(!ProjectManager.isWithinProject(configFilePath))return void reject(`JSHint Project changed while scanning ${configFilePath}`);let config;const content=configDoc.getText();try{config=JSON.parse(removeComments(content)),console.log("JSHint: loaded config file for project "+configFilePath)}catch(e){return console.log("JSHint: error parsing "+configFilePath,content,e),void reject(StringUtils.format(Strings.JSHINT_CONFIG_JSON_ERROR,displayPath))}if(config.extends){let extendFile=FileSystem.getFileForPath(path.join(dir,config.extends));_readConfig(extendFile.parentPath,extendFile.name).then(baseConfigResult=>{delete config.extends;let mergedConfig=$.extend({},baseConfigResult,config);config.globals&&delete config.globals,resolve(mergedConfig)}).catch(()=>{let extendDisplayPath=ProjectManager.makeProjectRelativeIfPossible(extendFile.fullPath);extendDisplayPath=ProjectManager.getProjectRelativeOrDisplayPath(extendDisplayPath),reject(StringUtils.format(Strings.JSHINT_CONFIG_JSON_ERROR,extendDisplayPath))})}else resolve(config)}).fail(err=>{err!==FileSystemError.NOT_FOUND?(console.error("Error reading JSHint Config File",configFilePath,err),reject(StringUtils.format(Strings.JSHINT_CONFIG_ERROR,displayPath))):resolve(null)})})}function _reloadOptions(){projectSpecificOptions=null,jsHintConfigFileErrorMessage=null;const scanningProjectPath=ProjectManager.getProjectRoot().fullPath;_readConfig(scanningProjectPath,CONFIG_FILE_NAME).then(config=>{scanningProjectPath===ProjectManager.getProjectRoot().fullPath&&(config&&Metrics.countEvent(Metrics.EVENT_TYPE.LINT,"jsHint","config"),projectSpecificOptions=config,jsHintConfigFileErrorMessage=null,CodeInspection.requestRun(Strings.JSHINT_NAME))}).catch(err=>{scanningProjectPath===ProjectManager.getProjectRoot().fullPath&&(Metrics.countEvent(Metrics.EVENT_TYPE.LINT,"jsHintConfig","error"),jsHintConfigFileErrorMessage=err,CodeInspection.requestRun(Strings.JSHINT_NAME))})}function isJSHintConfigActive(){return!(!jsHintConfigFileErrorMessage&&!projectSpecificOptions)}function _projectFileChanged(_evt,changedPath,addedSet,removedSet){let configPath=path.join(ProjectManager.getProjectRoot().fullPath,CONFIG_FILE_NAME);changedPath===configPath||addedSet.has(configPath)?_reloadOptions():removedSet.has(configPath)&&(projectSpecificOptions=null,jsHintConfigFileErrorMessage=null)}AppInit.appReady(function(){ProjectManager.on(ProjectManager.EVENT_PROJECT_CHANGED_OR_RENAMED_PATH,_projectFileChanged),ProjectManager.on(ProjectManager.EVENT_PROJECT_OPEN,_reloadOptions),_reloadOptions()}),CodeInspection.register("javascript",{name:Strings.JSHINT_NAME,scanFileAsync:lintOneFile,canInspect:function(fullPath){return!prefs.get("disabled")&&fullPath&&!fullPath.endsWith(".min.js")&&(isJSHintConfigActive()||!ESLint.isESLintActive())}}),exports.isJSHintConfigActive=isJSHintConfigActive});
//# sourceMappingURL=JSHint.js.map
